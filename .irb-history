q
p Components::EventsReceiver::DouReceiver.new
dou Components::EventsReceiver::DouReceiver.new
p dou.link
p dou[:link]
p dou["link"]
p dou["rss"]["item"]
p dou["rss"]
dou["rss"]
dou.get_data
p dou.data
p dou.data[:rss]
p dou.data["rss"]
p dou.data["rss"]["channel"]
p dou.data["rss"]["channel"]["item"]
dou.fetch_data_from_xml
clear
p dou.data["rss"]["channel"]["item"][0].to_json
p dou.data["rss"]["channel"]["item"][0].to_json.to_s
p dou.data["rss"]["channel"]["item"][0].to_json.to_s.encode("UTF-8")
File.open('выходные данные.txt', 'w'){ |file| file.write dou.data["rss"]["channel"]["item"][0].to_json.to_s.encode("UTF-8").html_safe}
File.open('выходные данные.txt', 'w'){ |file| file.write raw(dou.data["rss"]["channel"]["item"][0].to_json.to_s.encode("UTF-8"))}
File.open('выходные данные.txt', 'w'){ |file| file.write dou.data["rss"]["channel"]["item"][0].to_json.to_s.encode("UTF-8")}
File.open('выходные данные.txt', 'w'){ |file| file.write JSON.parse(dou.data["rss"]["channel"]["item"][0].to_json).to_json}
File.open('выходные данные.txt', 'w'){ |file| file.write JSON.parse(dou.data["rss"]["channel"]["item"][0].to_json)}
p dou.data["rss"]["channel"]["item"][0]
p dou.data["rss"]["channel"]["item"][0]["description"]
p HASH.from_xml dou.data["rss"]["channel"]["item"][0]["description"]
p Hash.from_xml dou.data["rss"]["channel"]["item"][0]["description"]
File.open('выходные данные.html', 'w'){ |file| file.write dou.data["rss"]["channel"]["item"][0]["description"])}
File.open('выходные данные.html', 'w'){ |file| file.write dou.data["rss"]["channel"]["item"][0]["description"]}
File.open('выходные данные.html', 'w'){ |file| file.write dou.data["rss"]["channel"]["item"][1]["description"]}
s = "Ods, ffggjj  fdsf fsdf"
s = "Ods"
p s.split(',')[0]
Components::EventsReceiver::DouReceiver.get_and_write_data_from_dou
SOURCE_EVENTS_URL = URI('https://dou.ua/calendar/feed/%D0%B2%D1%81%D0%B5%20%D1%82%D0%B5%D0%BC%D1%8B%2F%D0%9E%D0%B4%D0%B5%D1%81%D1%81%D0%B0')
@data = Hash.from_xml(Net::HTTP.get(SOURCE_EVENTS_URL))
evnts = @data['rss']['channel']['item']
evnt = evnts[0]
d= data["rss"]["channel"]["item"][0]["description"]
d= evnt["description"]
h =Nokogiri:HTML(d)
d
l = d.lines.first
Nokogiri::HTML(l)
h.children.children.children.children.children.children
h.children.children.children.children.children.children.attributes[0].value
h.children.children.children.children.children.children.attribute[0].value
h.children.children.children.children.children.children.attributes
h.children.children.children.children.children.children.attribute
h.children.children.children.children.children.children.attribute 1
h.children.children.children.children.children.children.attribute "src", "value"
h = Nokogiri::HTML(l)
h.children.children.children.children.children.children.attribute "src"
(h.children.children.children.children.children.children.attribute "src").value
dou.data
n.atrinute('document')
n.atribute('document')
n.attribute('document')
n.document
n.document.html
h.xpath("//src")
n.xpath("//src")
n.xpath("src")
n.xpath("img")
n.xpath("document//html")
n.xpath("document")
n.xpath("")
n.search("img").
n.search("img").attribute("value")
n.search("img").value
n.search("img")
n.search("img").attribute("src")
n.search("img").attribute("src").value
Components::EventsReceiver::DouReceiver.run
dou = Components::EventsReceiver::DouReceiver.new
dou = Components::EventsReceiver::DouReceiver.instanse
dou = Components::EventsReceiver::DouReceiver.instance
dou = Components::EventsReceiver::DouReceiver.fetch_data_from_xml("")
dou.fetch_data_from_xml("")
e = dou.data['rss']['channel']['item'][0]
l = e['description'].lines.first
n = Nokogiri::HTML(l)
n.search("strong")
n.search("a")
n.search("a").remove
n
n.html
n.content
exit
